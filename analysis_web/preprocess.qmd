# First Banch Preprocess Workflow

## Packages

```{r pkgs}
library(tidyverse)
```


## Custom preprocess functions

```{r mr-preproc-fun}
mr_preproc <- function(d) {

  require(tidyverse)
  
  d |> select(
    # select columns we need
    "Индивидуальный_код",
    correctAns,
    base_pic,
    rotated_pic,
    resp_MR_easy.keys,
    resp_MR_easy.corr,
    resp_MR_easy.rt
  ) |>
    drop_na() |> # remove technical NAs (recording artefacts, not missing data)
    mutate(task = "MR",
           # add task name (mental rotation)
           level = "easy",
           # add difficulty level
           trial = 1:16) |> # number trials
    rename(
      "id" = "Индивидуальный_код",
      # rename columns for handy usage
      "key" = resp_MR_easy.keys,
      "is_correct" = resp_MR_easy.corr,
      "rt" = resp_MR_easy.rt
    ) -> MR_easy # ready to use
  
  
  d |> select(
    # select columns we need
    "Индивидуальный_код",
    correctAns,
    base_pic,
    rotated_pic,
    resp_MR_medium.keys,
    resp_MR_medium.corr,
    resp_MR_medium.rt
  ) |>
    drop_na() |> # remove technical NAs (recording artefacts, not missing data)
    mutate(task = "MR",
           # add task name (mental rotation)
           level = "medium",
           # add difficulty level
           trial = 1:16) |>  # number trials
    rename(
      # rename columns for handy usage
      "id" = "Индивидуальный_код",
      "key" = resp_MR_medium.keys,
      "is_correct" = resp_MR_medium.corr,
      "rt" = resp_MR_medium.rt
    ) -> MR_medium # ready to use
  
  
  
  d |> select(
    # select columns we need
    "Индивидуальный_код",
    correctAns,
    base_pic,
    rotated_pic,
    resp_MR_hard.keys,
    resp_MR_hard.corr,
    resp_MR_hard.rt
  ) |>
    drop_na() |> # remove technical NAs (recording artefacts, not missing data)
    mutate(task = "MR",
           # add task name (mental rotation)
           level = "hard",
           # add difficulty level
           trial = 1:16) |> # number trials
    rename(
      # rename columns for handy usage
      "id" = "Индивидуальный_код",
      "key" = resp_MR_hard.keys,
      "is_correct" = resp_MR_hard.corr,
      "rt" = resp_MR_hard.rt
    ) -> MR_hard # ready to use
  
  # bind all conditions of mental rotation task to one tibble
  
  bind_rows(MR_easy, MR_medium, MR_hard) -> MR
  
  return(MR)
  
}
```

```{r ms-preproc-fun}
ms_preproc <- function(d) {
  
  # Since we our participants could fill the fields in any order, 
  # here is a function which allows us to count correct inputs 
  # our subjects made.
  
  n_count <- function(df) {
    df |> select(matches("^noun")) |> as.matrix() -> s
    df |> select(matches("^resp")) |> as.matrix() -> r
    a <- vector(mode = "numeric", length = 16L)
    for (i in 1:16) {
      a[i] <- sum(r[i, ] %in% s[i, ])
    }
    return(a)
  }
  
  if ("mouse_MSe.time" %in% colnames(d)) {
    
    d |> select(
      "Индивидуальный_код",
      matches("^noun"),
      matches("resp\\d\\.text$"),
      "mouse_MSe.time"
    ) |>
      filter_at(vars(paste0("noun", 1:3)), all_vars(!is.na(.))) |>
      filter_at(vars(paste0("noun", 4:7)), all_vars(is.na(.))) |>
      mutate(task = "MS",
             level = "easy") |>
      rename(
        "resp1" = resp1.text,
        "resp2" = resp2.text,
        "resp3" = resp3.text,
        "id" = "Индивидуальный_код",
        "rt" = "mouse_MSe.time"
      ) |>
      select(-c(paste0("noun", 4:7))) -> MS_easy
    
    d |> select(
      "Индивидуальный_код",
      matches("^noun"),
      matches("MSm.text$"),
      "mouse_MSm.time"
    ) |>
      filter_at(vars(paste0("noun", 4:5)), all_vars(!is.na(.))) |>
      filter_at(vars(paste0("noun", 6:7)), all_vars(is.na(.))) |>
      mutate(task = "MS",
             level = "medium") |> 
      rename("id" = "Индивидуальный_код",
             "rt" = "mouse_MSm.time") |>
      rename_with(.fn = str_replace_all, 
                  pattern = "_MSm\\.text", 
                  replacement = "") |> 
      select(-noun6, -noun7) -> MS_medium
    
    
    d |> select(
      "Индивидуальный_код",
      matches("^noun"),
      matches("MSh.text$"),
      "mouse_MSh.time"
    ) |>
      filter_at(vars(paste0("noun", 1:7)), all_vars(!is.na(.))) |>
      mutate(task = "MS",
             level = "hard") |>
      rename("id" = "Индивидуальный_код",
             "rt" = "mouse_MSh.time") |> 
      rename_with(.fn = str_replace_all,
                  pattern = "_MSh\\.text",
                  replacement = "") -> MS_hard
    
  } else {
    
    d |> select("Индивидуальный_код",
                matches("^noun"),
                matches("resp\\d\\.text$")) |>
      filter_at(vars(paste0("noun", 1:3)), all_vars(!is.na(.))) |>
      filter_at(vars(paste0("noun", 4:7)), all_vars(is.na(.))) |>
      mutate(task = "MS",
             level = "easy",
             rt = NA) |>
      rename(
        "resp1" = resp1.text,
        "resp2" = resp2.text,
        "resp3" = resp3.text,
        "id" = "Индивидуальный_код"
      ) |>
      select(-c(paste0("noun", 4:7))) -> MS_easy
    
    d |> select("Индивидуальный_код",
                matches("^noun"),
                matches("MSm.text$")) |>
      filter_at(vars(paste0("noun", 4:5)), all_vars(!is.na(.))) |>
      filter_at(vars(paste0("noun", 6:7)), all_vars(is.na(.))) |>
      mutate(task = "MS",
             level = "medium",
             rt = NA) |>
      rename("id" = "Индивидуальный_код") |>
      rename_with(.fn = str_replace_all,
                  pattern = "_MSm\\.text",
                  replacement = "") |> 
      select(-noun6, -noun7) -> MS_medium
    
    
    d |> select("Индивидуальный_код",
                matches("^noun"),
                matches("MSh.text$")) |>
      filter_at(vars(paste0("noun", 1:7)), all_vars(!is.na(.))) |>
      mutate(task = "MS",
             level = "hard",
             rt = NA) |>
      rename("id" = "Индивидуальный_код") |> 
      rename_with(.fn = str_replace_all,
                  pattern = "_MSh\\.text", 
                  replacement = "") -> MS_hard
  }
  
  tibble(
    id = MS_easy$id[1],
    trials = 1:16,
    MS_easy_n = n_count(MS_easy),
    MS_easy_rt = MS_easy$rt,
    MS_medium_n = n_count(MS_medium),
    MS_medium_rt = MS_medium$rt,
    MS_hard_n = n_count(MS_hard),
    MS_hard_rt = MS_hard$rt
  ) |>
    pivot_longer(cols = -c("id", "trials"), values_to = "value") |>
    separate(name, c("task", "level", "name")) |>
    pivot_wider(values_from = value, names_from = name) |>
    mutate(acc = ifelse(level == "easy", n / 3,
                        ifelse(
                          level == "medium", n / 5,
                          ifelse(level == "hard", n / 7, NA)
                        ))) -> MS
  
  return(MS)
  
}
```

```{r st-preproc-fun}
st_preproc <- function(d) {

  require(tidyverse)
  
  d |> select(
    # select columns we need
    "Индивидуальный_код",
    target_present,
    key_resp_SE.keys,
    key_resp_SE.corr,
    key_resp_SE.rt
  ) |>
    drop_na() |> # remove technical NAs (recording artefacts, not missing data)
    mutate(task = "ST",
           # add task name (Sternberg task)
           level = "easy",
           # add difficulty level
           trial = 1:16) |> # number trials
    rename(
      # rename columns for handy usage
      "id" = "Индивидуальный_код",
      "key" = key_resp_SE.keys,
      "is_correct" = key_resp_SE.corr,
      "rt" = key_resp_SE.rt
    ) -> ST_easy # ready to use
  
  d |> select(
    # select columns we need
    "Индивидуальный_код",
    target_present,
    key_resp_SM.keys,
    key_resp_SM.corr,
    key_resp_SM.rt
  ) |>
    drop_na() |> # remove technical NAs (recording artefacts, not missing data)
    mutate(task = "ST",
           # add task name (Sternberg task)
           level = "medium",
           # add difficulty level
           trial = 1:16) |> # number trials
    rename(
      # rename columns for handy usage
      "id" = "Индивидуальный_код",
      "key" = key_resp_SM.keys,
      "is_correct" = key_resp_SM.corr,
      "rt" = key_resp_SM.rt
    ) -> ST_medium # ready to use
  
  
  d |> select(
    # select columns we need
    "Индивидуальный_код",
    target_present,
    resp_S_H_trials.keys,
    resp_S_H_trials.corr,
    resp_S_H_trials.rt
  ) |>
    drop_na() |> # remove technical NAs (recording artefacts, not missing data)
    mutate(task = "ST",
           # add task name (Sternberg task)
           level = "hard",
           # add difficulty level
           trial = 1:16) |> # number trials
    rename(
      # rename columns for handy usage
      "id" = "Индивидуальный_код",
      "key" = resp_S_H_trials.keys,
      "is_correct" = resp_S_H_trials.corr,
      "rt" = resp_S_H_trials.rt
    ) -> ST_hard # ready to use
  
  # bind all conditions of sternberg task to one tibble
  bind_rows(ST_easy, ST_hard, ST_medium) -> ST
  
  return(ST)

}
```

```{r nasatlx-preproc-fun}
nasatlx_preproc <- function(d) {
  d |> select("Индивидуальный_код",
              slider.response,
              head,
              task_type,
              task_level) |>
    filter_at(vars(head, task_type, task_level), all_vars(!is.na(.))) |>
    rename("id" = "Индивидуальный_код",
           "score" = slider.response) |>
    mutate(
      scale = recode(
        head,
        "Умственная нагрузка" = "ME",
        "Физическая нагрузка" = "PH",
        "Давление времени" = "TI",
        "Успешность выполнения" = "PE",
        "Усилия" = "EF",
        "Уровень фрустрации" = "FR"
      ),
      task = recode(
        task_type,
        "mental_rotation" = "MR",
        "sternberg" = "ST",
        "mental_span" = "MS"
      ),
      level = recode(
        task_level,
        "1" = "easy",
        "2" = "medium",
        "3" = "hard"
      )
    ) |>
    select(id, scale, score, task, level) -> NASATLX
  
  return(NASATLX)
}
```

```{r seq-preproc-fun}
sequence_preproc <- function(d) {
  
  d |> select(
    E_rotation,
    M_rotation,
    H_rotation,
    E_Sternberg,
    M_Sternberg,
    H_Sternberg,
    E_span,
    M_span,
    H_span
  ) |>
    drop_na() |>
    sapply(function(x) which(x == 1)) -> v 
    
  tibble(name = names(v),
           order = v,
           id = d[["Индивидуальный_код"]][1]) |>
    arrange(order) |>
    separate(name, c("level", "task"), "_") |>
    mutate(
      task = recode(
        task,
        "rotation" = "MR",
        "Sternberg" = "ST",
        "span" = "MS"
      ),
      level = recode(
        level,
        "E" = "easy",
        "M" = "medium",
        "H" = "hard"
      )
    ) -> SEQUENCE
  
  return(SEQUENCE)
  
}
```


## Load & preprocess data

```{r file-paths}
files <- paste0("../data-firstbanch/", dir("../data-firstbanch"))
length(files)
```

```{r empty-tibbles}
MR_data <- tibble()
ST_data <- tibble()
MS_data <- tibble()
NASATLX_data <- tibble()
SEQUENCE_data <- tibble()
```

```{r preprocess}

for (i in 1:length(files)) {
  
  print(files[i])
  
  d <- read_csv(files[i], show_col_types = FALSE)
  
  MR_data |> bind_rows(mr_preproc(d) |> mutate(file = files[i])) -> MR_data
  ST_data |> bind_rows(st_preproc(d) |> mutate(file = files[i])) -> ST_data
  MS_data |> bind_rows(ms_preproc(d) |> mutate(file = files[i])) -> MS_data
  NASATLX_data |> bind_rows(nasatlx_preproc(d) |> mutate(file = files[i])) -> NASATLX_data
  SEQUENCE_data |> bind_rows(sequence_preproc(d) |> mutate(file = files[i])) -> SEQUENCE_data

}

```

```{r check-ids}
unique(MR_data$file) |> length()
unique(ST_data$file) |> length()
unique(MS_data$file) |> length()
unique(NASATLX_data$file) |> length()
unique(SEQUENCE_data$file) |> length()
```

## Overall experiment time

```{r exptime-extract}

exptime <- tibble()

for (j in 1:length(files)) {
  
  print(files[j])
  
  tibble(file = files[j],
         start = files[j] |> 
           str_extract("\\d{4}-\\d{2}-\\d{2}_\\d+h\\d+\\.\\d+") |> 
           str_replace("h", ":") |> 
           str_replace("\\.", ":") |> 
           str_replace("_", " ") |> 
           as_datetime(tz = "Etc/GMT-3"),
         end = file.info(files[j])$mtime |> 
           as_datetime(tz = "UTC")
  ) |> 
    bind_rows(exptime) -> exptime
  
}
```

```{r duration-calc}
exptime |> 
  mutate(dur = abs(start - end)) -> exptime
```

## Create and add ids

```{r create-ids}
set.seed(123)
tibble(
  file = exptime$file,
  id = stringi::stri_rand_strings(length(exptime$file), 10)) -> IDS
```

```{r add-ids}
MR_data |> select(-id) |> full_join(IDS, by = "file") -> MR_data
ST_data |> select(-id) |> full_join(IDS, by = "file") -> ST_data
MS_data |> select(-id) |> full_join(IDS, by = "file") -> MS_data
NASATLX_data |> select(-id) |> full_join(IDS, by = "file") -> NASATLX_data
SEQUENCE_data |> select(-id) |> full_join(IDS, by = "file") -> SEQUENCE_data
exptime |> full_join(IDS, by = "file") -> exptime
```


## Save preprocessed data

```{r save-preproc-data}
MR_data |> select(-file) |> write_csv("MR_firstbanch_data.csv")
ST_data |> select(-file) |> write_csv("ST_firstbanch_data.csv")
MS_data |> select(-file) |> write_csv("MS_firstbanch_data.csv")
NASATLX_data |> select(-file) |> write_csv("NASATLX_firstbanch_data.csv")
SEQUENCE_data |> select(-file) |> write_csv("SEQ_firstbanch_data.csv")
exptime |> select(-file) |> write_csv("EXPTIME_firstbanch_data.csv")
IDS |> write_csv("IDS_firstbanch_data.csv")
```
