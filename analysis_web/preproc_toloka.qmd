# Preprocess. Toloka Banch

## Packages

```{r}
library(tidyverse)
theme_set(theme_bw())
```

## Functions

```{r toloka-preproc-fun}
mr_preproc <- function(d) {
  
  require(tidyverse)
  
  d |> select(
    # select columns we need
    correctAns,
    base_pic,
    rotated_pic,
    resp_MR_easy.keys,
    resp_MR_easy.corr,
    resp_MR_easy.rt
  ) |>
    drop_na() |> # remove technical NAs (recording artefacts, not missing data)
    mutate(task = "MR",
           # add task name (mental rotation)
           level = "easy",
           # add difficulty level
           trial = 1:16) |> # number trials
    rename(
      # rename columns for handy usage
      "key" = resp_MR_easy.keys,
      "is_correct" = resp_MR_easy.corr,
      "rt" = resp_MR_easy.rt
    ) -> MR_easy # ready to use
  
  
  d |> select(
    # select columns we need
    correctAns,
    base_pic,
    rotated_pic,
    resp_MR_medium.keys,
    resp_MR_medium.corr,
    resp_MR_medium.rt
  ) |>
    drop_na() |> # remove technical NAs (recording artefacts, not missing data)
    mutate(task = "MR",
           # add task name (mental rotation)
           level = "medium",
           # add difficulty level
           trial = 1:16) |>  # number trials
    rename(
      # rename columns for handy usage
      "key" = resp_MR_medium.keys,
      "is_correct" = resp_MR_medium.corr,
      "rt" = resp_MR_medium.rt
    ) -> MR_medium # ready to use
  
  
  
  d |> select(
    # select columns we need
    correctAns,
    base_pic,
    rotated_pic,
    resp_MR_hard.keys,
    resp_MR_hard.corr,
    resp_MR_hard.rt
  ) |>
    drop_na() |> # remove technical NAs (recording artefacts, not missing data)
    mutate(task = "MR",
           # add task name (mental rotation)
           level = "hard",
           # add difficulty level
           trial = 1:16) |> # number trials
    rename(
      # rename columns for handy usage
      "key" = resp_MR_hard.keys,
      "is_correct" = resp_MR_hard.corr,
      "rt" = resp_MR_hard.rt
    ) -> MR_hard # ready to use
  
  # bind all conditions of mental rotation task to one tibble
  
  bind_rows(MR_easy, MR_medium, MR_hard) -> MR
  
  return(MR)
  
}

st_preproc <- function(d) {
  
  require(tidyverse)
  
  d |> select(
    # select columns we need
    target_present,
    key_resp_SE.keys,
    key_resp_SE.corr,
    key_resp_SE.rt
  ) |>
    drop_na() |> # remove technical NAs (recording artefacts, not missing data)
    mutate(task = "ST",
           # add task name (Sternberg task)
           level = "easy",
           # add difficulty level
           trial = 1:16) |> # number trials
    rename(
      # rename columns for handy usage
      "key" = key_resp_SE.keys,
      "is_correct" = key_resp_SE.corr,
      "rt" = key_resp_SE.rt
    ) -> ST_easy # ready to use
  
  d |> select(
    # select columns we need
    target_present,
    key_resp_SM.keys,
    key_resp_SM.corr,
    key_resp_SM.rt
  ) |>
    drop_na() |> # remove technical NAs (recording artefacts, not missing data)
    mutate(task = "ST",
           # add task name (Sternberg task)
           level = "medium",
           # add difficulty level
           trial = 1:16) |> # number trials
    rename(
      # rename columns for handy usage
      "key" = key_resp_SM.keys,
      "is_correct" = key_resp_SM.corr,
      "rt" = key_resp_SM.rt
    ) -> ST_medium # ready to use
  
  
  d |> select(
    # select columns we need
    target_present,
    resp_S_H_trials.keys,
    resp_S_H_trials.corr,
    resp_S_H_trials.rt
  ) |>
    drop_na() |> # remove technical NAs (recording artefacts, not missing data)
    mutate(task = "ST",
           # add task name (Sternberg task)
           level = "hard",
           # add difficulty level
           trial = 1:16) |> # number trials
    rename(
      # rename columns for handy usage
      "key" = resp_S_H_trials.keys,
      "is_correct" = resp_S_H_trials.corr,
      "rt" = resp_S_H_trials.rt
    ) -> ST_hard # ready to use
  
  # bind all conditions of sternberg task to one tibble
  bind_rows(ST_easy, ST_hard, ST_medium) -> ST
  
  return(ST)
  
}

ms_preproc <- function(d) {
  
  # Since we our participants could fill the fields in any order, 
  # here is a function which allows us to count correct inputs 
  # our subjects made.
  
  n_count <- function(df) {
    df |> select(matches("^noun")) |> as.matrix() -> s
    df |> select(matches("^resp")) |> as.matrix() -> r
    a <- vector(mode = "numeric", length = 16L)
    for (i in 1:16) {
      a[i] <- sum(r[i, ] %in% s[i, ])
    }
    return(a)
  }
  
  if ("mouse_MSe.time" %in% colnames(d)) {
    
    d |> select(
      matches("^noun"),
      matches("resp\\d\\.text$"),
      "mouse_MSe.time"
    ) |>
      filter_at(vars(paste0("noun", 1:3)), all_vars(!is.na(.))) |>
      filter_at(vars(paste0("noun", 4:7)), all_vars(is.na(.))) |>
      mutate(task = "MS",
             level = "easy") |>
      rename(
        "resp1" = resp1.text,
        "resp2" = resp2.text,
        "resp3" = resp3.text,
        "rt" = "mouse_MSe.time"
      ) |>
      select(-c(paste0("noun", 4:7))) -> MS_easy
    
    d |> select(
      matches("^noun"),
      matches("MSm.text$"),
      "mouse_MSm.time"
    ) |>
      filter_at(vars(paste0("noun", 4:5)), all_vars(!is.na(.))) |>
      filter_at(vars(paste0("noun", 6:7)), all_vars(is.na(.))) |>
      mutate(task = "MS",
             level = "medium") |> 
      rename("rt" = "mouse_MSm.time") |>
      rename_with(.fn = str_replace_all, 
                  pattern = "_MSm\\.text", 
                  replacement = "") |> 
      select(-noun6, -noun7) -> MS_medium
    
    
    d |> select(
      matches("^noun"),
      matches("MSh.text$"),
      "mouse_MSh.time"
    ) |>
      filter_at(vars(paste0("noun", 1:7)), all_vars(!is.na(.))) |>
      mutate(task = "MS",
             level = "hard") |>
      rename("rt" = "mouse_MSh.time") |> 
      rename_with(.fn = str_replace_all,
                  pattern = "_MSh\\.text",
                  replacement = "") -> MS_hard
    
  } else {
    
    d |> select(matches("^noun"),
                matches("resp\\d\\.text$")) |>
      filter_at(vars(paste0("noun", 1:3)), all_vars(!is.na(.))) |>
      filter_at(vars(paste0("noun", 4:7)), all_vars(is.na(.))) |>
      mutate(task = "MS",
             level = "easy",
             rt = NA) |>
      rename(
        "resp1" = resp1.text,
        "resp2" = resp2.text,
        "resp3" = resp3.text
      ) |>
      select(-c(paste0("noun", 4:7))) -> MS_easy
    
    d |> select(matches("^noun"),
                matches("MSm.text$")) |>
      filter_at(vars(paste0("noun", 4:5)), all_vars(!is.na(.))) |>
      filter_at(vars(paste0("noun", 6:7)), all_vars(is.na(.))) |>
      mutate(task = "MS",
             level = "medium",
             rt = NA) |>
      rename_with(.fn = str_replace_all,
                  pattern = "_MSm\\.text",
                  replacement = "") |> 
      select(-noun6, -noun7) -> MS_medium
    
    
    d |> select(matches("^noun"),
                matches("MSh.text$")) |>
      filter_at(vars(paste0("noun", 1:7)), all_vars(!is.na(.))) |>
      mutate(task = "MS",
             level = "hard",
             rt = NA) |>
      rename_with(.fn = str_replace_all,
                  pattern = "_MSh\\.text", 
                  replacement = "") -> MS_hard
  }
  
  tibble(
    #id = MS_easy$id[1],
    trials = 1:16,
    MS_easy_n = n_count(MS_easy),
    MS_easy_rt = MS_easy$rt,
    MS_medium_n = n_count(MS_medium),
    MS_medium_rt = MS_medium$rt,
    MS_hard_n = n_count(MS_hard),
    MS_hard_rt = MS_hard$rt
  ) |>
    pivot_longer(cols = -c("trials"), values_to = "value") |>
    separate(name, c("task", "level", "name")) |>
    pivot_wider(values_from = value, names_from = name) |>
    mutate(acc = ifelse(level == "easy", n / 3,
                        ifelse(
                          level == "medium", n / 5,
                          ifelse(level == "hard", n / 7, NA)
                        ))) -> MS
  
  return(MS)
  
}

nasatlx_preproc <- function(d) {
  d |> select(slider.response,
              head,
              task_type,
              task_level) |>
    filter_at(vars(head, task_type, task_level), all_vars(!is.na(.))) |>
    rename("score" = slider.response) |>
    mutate(
      scale = recode(
        head,
        "Умственная нагрузка" = "ME",
        "Физическая нагрузка" = "PH",
        "Давление времени" = "TI",
        "Успешность выполнения" = "PE",
        "Усилия" = "EF",
        "Уровень фрустрации" = "FR"
      ),
      task = recode(
        task_type,
        "mental_rotation" = "MR",
        "sternberg" = "ST",
        "mental_span" = "MS"
      ),
      level = recode(
        task_level,
        "1" = "easy",
        "2" = "medium",
        "3" = "hard"
      )
    ) |>
    select(scale, score, task, level) -> NASATLX
  
  return(NASATLX)
}

sequence_preproc <- function(d) {

  d |> select(
    E_rotation,
    M_rotation,
    H_rotation,
    E_Sternberg,
    M_Sternberg,
    H_Sternberg,
    E_span,
    M_span,
    H_span
  ) |>
    drop_na() |>
    sapply(function(x) which(x == 1)) -> v

  tibble(name = names(v),
         order = v) |>
    arrange(order) |>
    separate(name, c("level", "task"), "_") |>
    mutate(
      task = recode(
        task,
        "rotation" = "MR",
        "Sternberg" = "ST",
        "span" = "MS"
      ),
      level = recode(
        level,
        "E" = "easy",
        "M" = "medium",
        "H" = "hard"
      )
    ) -> SEQUENCE

  return(SEQUENCE)

}

weights_preproc <- function(d) {
  
  d %>% 
    select(matches("^pair"), task_type) %>% 
    drop_na() %>% 
    pivot_longer(cols = matches("^pair")) %>% 
    mutate(value = value %>% str_remove_all("\\\\n|\\[|\\]")) %>% 
    separate(value, into = c("option1", "option2"), sep = ",") -> pairs
  
  d %>% 
    select(matches("^S_pc"), task_type) %>% 
    drop_na() %>% 
    pivot_longer(cols = matches("^S_pc")) %>% 
    mutate(name = name %>% str_remove("\\.response") %>% 
             str_replace("S_pc_", "pair")) %>% 
    full_join(pairs, by = join_by(task_type, name)) %>% 
    mutate(choice = ifelse(value == 1, option1, option2)) %>% 
    mutate(choice = recode(choice,
                           '"Умственнаянагрузка"' = "ME",
                           '"Физическаянагрузка"' = "PH",
                           '"Усилия"' = "EF",
                           '"Давленивремени"' = "TI",
                           '"Успешностьвыполнения"' = "PE",
                           '"Уровеньфрустрации"' = "FR")) %>% 
    group_by(task_type, choice) %>% 
    summarise(n = n()) %>% 
    mutate(w = n / 15) -> WEIGHTS
  
  return(WEIGHTS)
  
}

```


## All Toloka files

```{r, include=FALSE}
## dropped with low accuracy
file.remove("../data-toloka/pool2/MA1907_toloka_2023-07-19_16h56.11.966.csv")
## broken file, no MS hard data 
file.remove("../data-toloka/pool34/21111984_toloka_2023-07-21_17h42.24.114.csv")
```

```{r toloka-all-files}
files <- c(
  paste0("../data-toloka/pool1/", dir("../data-toloka/pool1")),
  paste0("../data-toloka/pool2/", dir("../data-toloka/pool2")),
  paste0("../data-toloka/pool34/", dir("../data-toloka/pool34")),
  paste0("../data-toloka/pool5/", dir("../data-toloka/pool5"))
)
```

```{r}
MR_data <- tibble()
ST_data <- tibble()
MS_data <- tibble()
NASATLX_data <- tibble()
SEQUENCE_data <- tibble()
WEIGHTS_data <- tibble()
```

```{r loading-data, message=FALSE}
for (i in 1:length(files)) {
  
  print(files[i])
  
  d <- read_csv(files[i], show_col_types = FALSE)
  
  MR_data |> bind_rows(mr_preproc(d) |> mutate(file = files[i])) -> MR_data
  ST_data |> bind_rows(st_preproc(d) |> mutate(file = files[i])) -> ST_data
  MS_data |> bind_rows(ms_preproc(d) |> mutate(file = files[i])) -> MS_data
  NASATLX_data |> bind_rows(nasatlx_preproc(d) |> mutate(file = files[i])) -> NASATLX_data
  SEQUENCE_data |> bind_rows(sequence_preproc(d) |> mutate(file = files[i])) -> SEQUENCE_data
  WEIGHTS_data |> bind_rows(weights_preproc(d) |> mutate(file = files[i])) -> WEIGHTS_data
  
}
```


### Create IDs for Toloka files

```{r}
set.seed(116)
tibble(file = MR_data$file |> unique(),
       id = stringi::stri_rand_strings(MR_data$file |> unique() |> length(),
                                       length = 10)) |> 
  mutate(pool = str_extract_all(file, "pool\\d+") |> unlist()) -> tolokaIDS

```

```{r}
unique(MR_data$file) |> length()
unique(ST_data$file) |> length()
unique(MS_data$file) |> length()
unique(NASATLX_data$file) |> length()
unique(SEQUENCE_data$file) |> length()
```

## Plotting

```{r}
MR_data %>% 
  full_join(tolokaIDS, by = "file") |> 
  filter(pool == "pool5")|> 
  ggplot(aes(level, rt)) +
  geom_boxplot(data = MR_data |> select(-file), color = "darkred") +
  geom_boxplot() +
  facet_wrap(~ file, scales = "free_y") +
  ylim(0, 100)
```

```{r}
MS_data %>% 
  full_join(tolokaIDS, by = "file") |> 
  filter(pool == "pool5")|>
  ggplot(aes(level, rt)) +
  geom_boxplot(data = MS_data |> select(-file), color = "darkred") +
  geom_boxplot() +
  facet_wrap(~ file, scales = "free_y") +
  ylim(0, 250)
```

```{r}
ST_data %>% 
  full_join(tolokaIDS, by = "file") |> 
  filter(pool == "pool5")|>
  ggplot(aes(level, rt)) +
  geom_boxplot(data = ST_data |> select(-file), color = "darkred") +
  geom_boxplot() +
  facet_wrap(~ file, scales = "free_y") +
  ylim(0, 25)
```


```{r add-ids}
MR_data |> 
  full_join(tolokaIDS) |> 
  select(-file) -> MR_data
MS_data |> 
  full_join(tolokaIDS) |> 
  select(-file) -> MS_data
ST_data |> 
  full_join(tolokaIDS) |> 
  select(-file) -> ST_data
NASATLX_data |> 
  full_join(tolokaIDS) |> 
  select(-file) %>% 
  pivot_wider(names_from = scale, values_from = score) %>% 
  mutate(PE = 20 - PE) %>% # reverse PE scale
  pivot_longer(cols = -c("task", "level", "id"),
               names_to = "scale", values_to = "score") %>% 
  mutate(score = (score * 5) %>% round()) -> NASATLX_data
SEQUENCE_data |> 
  full_join(tolokaIDS) |> 
  select(-file) -> SEQUENCE_data
WEIGHTS_data |> 
  full_join(tolokaIDS) |> 
  select(-file) -> WEIGHTS_data
```


## Clear & Aggregate

```{r}
MR_data %>% 
  group_by(id, level, task) %>% 
  summarise(median = median(rt),
            q1 = quantile(rt, 0.25),
            q3 = quantile(rt, 0.75),
            iqr = q3 - q1) %>% 
  full_join(MR_data, by = c("id", "level", "task")) %>% 
  mutate(not_outlier = ifelse(rt > q1 - 1.5 * iqr & rt < q3 + 1.5 * iqr, TRUE, FALSE)) %>% 
  filter(not_outlier) %>% 
  group_by(task, level, id) |> 
  summarise(rt = mean(rt),
            acc = mean(is_correct)) -> MR_data_toloka_agg
```


```{r}
ST_data |> 
  group_by(id, level, task) %>% 
  summarise(median = median(rt),
            q1 = quantile(rt, 0.25),
            q3 = quantile(rt, 0.75),
            iqr = q3 - q1) %>% 
  full_join(ST_data, by = c("id", "level", "task")) %>% 
  mutate(not_outlier = ifelse(rt > q1 - 1.5 * iqr & rt < q3 + 1.5 * iqr, TRUE, FALSE)) %>% 
  filter(not_outlier) %>% 
  group_by(task, level, id) |> 
  summarise(rt = mean(rt),
            acc = mean(is_correct)) -> ST_data_toloka_agg
```


```{r}
MS_data |> 
  group_by(id, level, task) %>% 
  summarise(median = median(rt),
            q1 = quantile(rt, 0.25),
            q3 = quantile(rt, 0.75),
            iqr = q3 - q1) %>% 
  full_join(MS_data, by = c("id", "level", "task")) %>% 
  mutate(not_outlier = ifelse(rt > q1 - 1.5 * iqr & rt < q3 + 1.5 * iqr, 
                              TRUE, FALSE)) %>% 
  filter(not_outlier) %>% 
  group_by(task, level, id) |> 
  summarise(rt = mean(rt),
            acc = mean(acc)) -> MS_data_toloka_agg
```





## Export preprocessed data

```{r}
MR_data_toloka_agg |> write_csv("../preproc-data/mental_rotation_data_toloka.csv")
ST_data_toloka_agg |> write_csv("../preproc-data/sternberg_data_toloka.csv")
MS_data_toloka_agg |> write_csv("../preproc-data/mental_span_data_toloka.csv")
NASATLX_data |> write_csv("../preproc-data/nasa_tlx_data_toloka.csv")
SEQUENCE_data |> write_csv("../preproc-data/sequence_data_toloka.csv")
WEIGHTS_data |> write_csv("../preproc-data/weights_data_toloka.csv")
```

