{"title":"First Banch Preprocess Workflow","markdown":{"headingText":"First Banch Preprocess Workflow","containsRefs":false,"markdown":"\n## Packages\n\n```{r pkgs}\nlibrary(tidyverse)\n```\n\n\n## Custom preprocess functions\n\n```{r mr-preproc-fun}\nmr_preproc <- function(d) {\n\n  require(tidyverse)\n  \n  d |> select(\n    # select columns we need\n    \"Индивидуальный_код\",\n    correctAns,\n    base_pic,\n    rotated_pic,\n    resp_MR_easy.keys,\n    resp_MR_easy.corr,\n    resp_MR_easy.rt\n  ) |>\n    drop_na() |> # remove technical NAs (recording artefacts, not missing data)\n    mutate(task = \"MR\",\n           # add task name (mental rotation)\n           level = \"easy\",\n           # add difficulty level\n           trial = 1:16) |> # number trials\n    rename(\n      \"id\" = \"Индивидуальный_код\",\n      # rename columns for handy usage\n      \"key\" = resp_MR_easy.keys,\n      \"is_correct\" = resp_MR_easy.corr,\n      \"rt\" = resp_MR_easy.rt\n    ) -> MR_easy # ready to use\n  \n  \n  d |> select(\n    # select columns we need\n    \"Индивидуальный_код\",\n    correctAns,\n    base_pic,\n    rotated_pic,\n    resp_MR_medium.keys,\n    resp_MR_medium.corr,\n    resp_MR_medium.rt\n  ) |>\n    drop_na() |> # remove technical NAs (recording artefacts, not missing data)\n    mutate(task = \"MR\",\n           # add task name (mental rotation)\n           level = \"medium\",\n           # add difficulty level\n           trial = 1:16) |>  # number trials\n    rename(\n      # rename columns for handy usage\n      \"id\" = \"Индивидуальный_код\",\n      \"key\" = resp_MR_medium.keys,\n      \"is_correct\" = resp_MR_medium.corr,\n      \"rt\" = resp_MR_medium.rt\n    ) -> MR_medium # ready to use\n  \n  \n  \n  d |> select(\n    # select columns we need\n    \"Индивидуальный_код\",\n    correctAns,\n    base_pic,\n    rotated_pic,\n    resp_MR_hard.keys,\n    resp_MR_hard.corr,\n    resp_MR_hard.rt\n  ) |>\n    drop_na() |> # remove technical NAs (recording artefacts, not missing data)\n    mutate(task = \"MR\",\n           # add task name (mental rotation)\n           level = \"hard\",\n           # add difficulty level\n           trial = 1:16) |> # number trials\n    rename(\n      # rename columns for handy usage\n      \"id\" = \"Индивидуальный_код\",\n      \"key\" = resp_MR_hard.keys,\n      \"is_correct\" = resp_MR_hard.corr,\n      \"rt\" = resp_MR_hard.rt\n    ) -> MR_hard # ready to use\n  \n  # bind all conditions of mental rotation task to one tibble\n  \n  bind_rows(MR_easy, MR_medium, MR_hard) -> MR\n  \n  return(MR)\n  \n}\n```\n\n```{r ms-preproc-fun}\nms_preproc <- function(d) {\n  \n  # Since we our participants could fill the fields in any order, \n  # here is a function which allows us to count correct inputs \n  # our subjects made.\n  \n  n_count <- function(df) {\n    df |> select(matches(\"^noun\")) |> as.matrix() -> s\n    df |> select(matches(\"^resp\")) |> as.matrix() -> r\n    a <- vector(mode = \"numeric\", length = 16L)\n    for (i in 1:16) {\n      a[i] <- sum(r[i, ] %in% s[i, ])\n    }\n    return(a)\n  }\n  \n  if (\"mouse_MSe.time\" %in% colnames(d)) {\n    \n    d |> select(\n      \"Индивидуальный_код\",\n      matches(\"^noun\"),\n      matches(\"resp\\\\d\\\\.text$\"),\n      \"mouse_MSe.time\"\n    ) |>\n      filter_at(vars(paste0(\"noun\", 1:3)), all_vars(!is.na(.))) |>\n      filter_at(vars(paste0(\"noun\", 4:7)), all_vars(is.na(.))) |>\n      mutate(task = \"MS\",\n             level = \"easy\") |>\n      rename(\n        \"resp1\" = resp1.text,\n        \"resp2\" = resp2.text,\n        \"resp3\" = resp3.text,\n        \"id\" = \"Индивидуальный_код\",\n        \"rt\" = \"mouse_MSe.time\"\n      ) |>\n      select(-c(paste0(\"noun\", 4:7))) -> MS_easy\n    \n    d |> select(\n      \"Индивидуальный_код\",\n      matches(\"^noun\"),\n      matches(\"MSm.text$\"),\n      \"mouse_MSm.time\"\n    ) |>\n      filter_at(vars(paste0(\"noun\", 4:5)), all_vars(!is.na(.))) |>\n      filter_at(vars(paste0(\"noun\", 6:7)), all_vars(is.na(.))) |>\n      mutate(task = \"MS\",\n             level = \"medium\") |> \n      rename(\"id\" = \"Индивидуальный_код\",\n             \"rt\" = \"mouse_MSm.time\") |>\n      rename_with(.fn = str_replace_all, \n                  pattern = \"_MSm\\\\.text\", \n                  replacement = \"\") |> \n      select(-noun6, -noun7) -> MS_medium\n    \n    \n    d |> select(\n      \"Индивидуальный_код\",\n      matches(\"^noun\"),\n      matches(\"MSh.text$\"),\n      \"mouse_MSh.time\"\n    ) |>\n      filter_at(vars(paste0(\"noun\", 1:7)), all_vars(!is.na(.))) |>\n      mutate(task = \"MS\",\n             level = \"hard\") |>\n      rename(\"id\" = \"Индивидуальный_код\",\n             \"rt\" = \"mouse_MSh.time\") |> \n      rename_with(.fn = str_replace_all,\n                  pattern = \"_MSh\\\\.text\",\n                  replacement = \"\") -> MS_hard\n    \n  } else {\n    \n    d |> select(\"Индивидуальный_код\",\n                matches(\"^noun\"),\n                matches(\"resp\\\\d\\\\.text$\")) |>\n      filter_at(vars(paste0(\"noun\", 1:3)), all_vars(!is.na(.))) |>\n      filter_at(vars(paste0(\"noun\", 4:7)), all_vars(is.na(.))) |>\n      mutate(task = \"MS\",\n             level = \"easy\",\n             rt = NA) |>\n      rename(\n        \"resp1\" = resp1.text,\n        \"resp2\" = resp2.text,\n        \"resp3\" = resp3.text,\n        \"id\" = \"Индивидуальный_код\"\n      ) |>\n      select(-c(paste0(\"noun\", 4:7))) -> MS_easy\n    \n    d |> select(\"Индивидуальный_код\",\n                matches(\"^noun\"),\n                matches(\"MSm.text$\")) |>\n      filter_at(vars(paste0(\"noun\", 4:5)), all_vars(!is.na(.))) |>\n      filter_at(vars(paste0(\"noun\", 6:7)), all_vars(is.na(.))) |>\n      mutate(task = \"MS\",\n             level = \"medium\",\n             rt = NA) |>\n      rename(\"id\" = \"Индивидуальный_код\") |>\n      rename_with(.fn = str_replace_all,\n                  pattern = \"_MSm\\\\.text\",\n                  replacement = \"\") |> \n      select(-noun6, -noun7) -> MS_medium\n    \n    \n    d |> select(\"Индивидуальный_код\",\n                matches(\"^noun\"),\n                matches(\"MSh.text$\")) |>\n      filter_at(vars(paste0(\"noun\", 1:7)), all_vars(!is.na(.))) |>\n      mutate(task = \"MS\",\n             level = \"hard\",\n             rt = NA) |>\n      rename(\"id\" = \"Индивидуальный_код\") |> \n      rename_with(.fn = str_replace_all,\n                  pattern = \"_MSh\\\\.text\", \n                  replacement = \"\") -> MS_hard\n  }\n  \n  tibble(\n    id = MS_easy$id[1],\n    trials = 1:16,\n    MS_easy_n = n_count(MS_easy),\n    MS_easy_rt = MS_easy$rt,\n    MS_medium_n = n_count(MS_medium),\n    MS_medium_rt = MS_medium$rt,\n    MS_hard_n = n_count(MS_hard),\n    MS_hard_rt = MS_hard$rt\n  ) |>\n    pivot_longer(cols = -c(\"id\", \"trials\"), values_to = \"value\") |>\n    separate(name, c(\"task\", \"level\", \"name\")) |>\n    pivot_wider(values_from = value, names_from = name) |>\n    mutate(acc = ifelse(level == \"easy\", n / 3,\n                        ifelse(\n                          level == \"medium\", n / 5,\n                          ifelse(level == \"hard\", n / 7, NA)\n                        ))) -> MS\n  \n  return(MS)\n  \n}\n```\n\n```{r st-preproc-fun}\nst_preproc <- function(d) {\n\n  require(tidyverse)\n  \n  d |> select(\n    # select columns we need\n    \"Индивидуальный_код\",\n    target_present,\n    key_resp_SE.keys,\n    key_resp_SE.corr,\n    key_resp_SE.rt\n  ) |>\n    drop_na() |> # remove technical NAs (recording artefacts, not missing data)\n    mutate(task = \"ST\",\n           # add task name (Sternberg task)\n           level = \"easy\",\n           # add difficulty level\n           trial = 1:16) |> # number trials\n    rename(\n      # rename columns for handy usage\n      \"id\" = \"Индивидуальный_код\",\n      \"key\" = key_resp_SE.keys,\n      \"is_correct\" = key_resp_SE.corr,\n      \"rt\" = key_resp_SE.rt\n    ) -> ST_easy # ready to use\n  \n  d |> select(\n    # select columns we need\n    \"Индивидуальный_код\",\n    target_present,\n    key_resp_SM.keys,\n    key_resp_SM.corr,\n    key_resp_SM.rt\n  ) |>\n    drop_na() |> # remove technical NAs (recording artefacts, not missing data)\n    mutate(task = \"ST\",\n           # add task name (Sternberg task)\n           level = \"medium\",\n           # add difficulty level\n           trial = 1:16) |> # number trials\n    rename(\n      # rename columns for handy usage\n      \"id\" = \"Индивидуальный_код\",\n      \"key\" = key_resp_SM.keys,\n      \"is_correct\" = key_resp_SM.corr,\n      \"rt\" = key_resp_SM.rt\n    ) -> ST_medium # ready to use\n  \n  \n  d |> select(\n    # select columns we need\n    \"Индивидуальный_код\",\n    target_present,\n    resp_S_H_trials.keys,\n    resp_S_H_trials.corr,\n    resp_S_H_trials.rt\n  ) |>\n    drop_na() |> # remove technical NAs (recording artefacts, not missing data)\n    mutate(task = \"ST\",\n           # add task name (Sternberg task)\n           level = \"hard\",\n           # add difficulty level\n           trial = 1:16) |> # number trials\n    rename(\n      # rename columns for handy usage\n      \"id\" = \"Индивидуальный_код\",\n      \"key\" = resp_S_H_trials.keys,\n      \"is_correct\" = resp_S_H_trials.corr,\n      \"rt\" = resp_S_H_trials.rt\n    ) -> ST_hard # ready to use\n  \n  # bind all conditions of sternberg task to one tibble\n  bind_rows(ST_easy, ST_hard, ST_medium) -> ST\n  \n  return(ST)\n\n}\n```\n\n```{r nasatlx-preproc-fun}\nnasatlx_preproc <- function(d) {\n  d |> select(\"Индивидуальный_код\",\n              slider.response,\n              head,\n              task_type,\n              task_level) |>\n    filter_at(vars(head, task_type, task_level), all_vars(!is.na(.))) |>\n    rename(\"id\" = \"Индивидуальный_код\",\n           \"score\" = slider.response) |>\n    mutate(\n      scale = recode(\n        head,\n        \"Умственная нагрузка\" = \"ME\",\n        \"Физическая нагрузка\" = \"PH\",\n        \"Давление времени\" = \"TI\",\n        \"Успешность выполнения\" = \"PE\",\n        \"Усилия\" = \"EF\",\n        \"Уровень фрустрации\" = \"FR\"\n      ),\n      task = recode(\n        task_type,\n        \"mental_rotation\" = \"MR\",\n        \"sternberg\" = \"ST\",\n        \"mental_span\" = \"MS\"\n      ),\n      level = recode(\n        task_level,\n        \"1\" = \"easy\",\n        \"2\" = \"medium\",\n        \"3\" = \"hard\"\n      )\n    ) |>\n    select(id, scale, score, task, level) -> NASATLX\n  \n  return(NASATLX)\n}\n```\n\n```{r seq-preproc-fun}\nsequence_preproc <- function(d) {\n  \n  d |> select(\n    E_rotation,\n    M_rotation,\n    H_rotation,\n    E_Sternberg,\n    M_Sternberg,\n    H_Sternberg,\n    E_span,\n    M_span,\n    H_span\n  ) |>\n    drop_na() |>\n    sapply(function(x) which(x == 1)) -> v \n    \n  tibble(name = names(v),\n           order = v,\n           id = d[[\"Индивидуальный_код\"]][1]) |>\n    arrange(order) |>\n    separate(name, c(\"level\", \"task\"), \"_\") |>\n    mutate(\n      task = recode(\n        task,\n        \"rotation\" = \"MR\",\n        \"Sternberg\" = \"ST\",\n        \"span\" = \"MS\"\n      ),\n      level = recode(\n        level,\n        \"E\" = \"easy\",\n        \"M\" = \"medium\",\n        \"H\" = \"hard\"\n      )\n    ) -> SEQUENCE\n  \n  return(SEQUENCE)\n  \n}\n```\n\n\n## Load & preprocess data\n\n```{r file-paths}\nfiles <- paste0(\"../data-pav/\", dir(\"../data-pav\"))\nlength(files)\n```\n\n```{r empty-tibbles}\nMR_data <- tibble()\nST_data <- tibble()\nMS_data <- tibble()\nNASATLX_data <- tibble()\nSEQUENCE_data <- tibble()\n```\n\n```{r preprocess}\n\nfor (i in 1:length(files)) {\n  \n  print(files[i])\n  \n  d <- read_csv(files[i], show_col_types = FALSE)\n  \n  MR_data |> bind_rows(mr_preproc(d) |> mutate(file = files[i])) -> MR_data\n  ST_data |> bind_rows(st_preproc(d) |> mutate(file = files[i])) -> ST_data\n  MS_data |> bind_rows(ms_preproc(d) |> mutate(file = files[i])) -> MS_data\n  NASATLX_data |> bind_rows(nasatlx_preproc(d) |> mutate(file = files[i])) -> NASATLX_data\n  SEQUENCE_data |> bind_rows(sequence_preproc(d) |> mutate(file = files[i])) -> SEQUENCE_data\n\n}\n\n```\n\n```{r check-ids}\nunique(MR_data$file) |> length()\nunique(ST_data$file) |> length()\nunique(MS_data$file) |> length()\nunique(NASATLX_data$file) |> length()\nunique(SEQUENCE_data$file) |> length()\n```\n\n## Overall experiment time\n\n```{r exptime-extract}\n\nexptime <- tibble()\n\nfor (j in 1:length(files)) {\n  \n  print(files[j])\n  \n  tibble(file = files[j],\n         start = files[j] |> \n           str_extract(\"\\\\d{4}-\\\\d{2}-\\\\d{2}_\\\\d+h\\\\d+\\\\.\\\\d+\") |> \n           str_replace(\"h\", \":\") |> \n           str_replace(\"\\\\.\", \":\") |> \n           str_replace(\"_\", \" \") |> \n           as_datetime(tz = \"Etc/GMT-3\"),\n         end = file.info(files[j])$mtime |> \n           as_datetime(tz = \"UTC\")\n  ) |> \n    bind_rows(exptime) -> exptime\n  \n}\n```\n\n```{r duration-calc}\nexptime |> \n  mutate(dur = abs(start - end)) -> exptime\n```\n\n## Create and add ids\n\n```{r create-ids}\nset.seed(123)\ntibble(\n  file = exptime$file,\n  id = stringi::stri_rand_strings(length(exptime$file), 10)) -> IDS\n```\n\n```{r add-ids}\nMR_data |> select(-id) |> full_join(IDS, by = \"file\") -> MR_data\nST_data |> select(-id) |> full_join(IDS, by = \"file\") -> ST_data\nMS_data |> select(-id) |> full_join(IDS, by = \"file\") -> MS_data\nNASATLX_data |> \n  select(-id) |> \n  full_join(IDS, by = \"file\") %>% \n  pivot_wider(names_from = scale, values_from = score) %>% \n  mutate(PE = 20 - PE) %>% # reverse PE scale\n  pivot_longer(cols = -c(\"task\", \"level\", \"id\"),\n               names_to = \"scale\", values_to = \"score\") %>% \n  mutate(score = (score * 5) %>% round()) -> NASATLX_data\nSEQUENCE_data |> select(-id) |> full_join(IDS, by = \"file\") -> SEQUENCE_data\nexptime |> full_join(IDS, by = \"file\") -> exptime\n```\n\n\n## Save preprocessed data\n\n```{r save-preproc-data}\nMR_data |> select(-file) |> \n  write_csv(\"../preproc-data/MR_pav_data.csv\")\nST_data |> select(-file) |> \n  write_csv(\"../preproc-data/ST_pav_data.csv\")\nMS_data |> select(-file) |> \n  write_csv(\"../preproc-data/MS_pav_data.csv\")\nNASATLX_data |> select(-file) |>\n  write_csv(\"../preproc-data/NASATLX_pav_data.csv\")\nSEQUENCE_data |> select(-file) |> \n  write_csv(\"../preproc-data/SEQ_pav_data.csv\")\nexptime |> select(-file) |> \n  write_csv(\"../preproc-data/EXPTIME_pav_data.csv\")\nIDS |> write_csv(\"../preproc-data/IDS_pav_data.csv\")\n```\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"preproc_pavlovia.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.340","theme":"cosmo"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}