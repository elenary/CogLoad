# First banch. Analysis workflow

```{r an-pav-opts}
knitr::opts_chunk$set(error = TRUE)
```

## Packages

```{r pkgs-analysis, message=FALSE}
library(tidyverse)
theme_set(theme_bw()) # set black and white theme
library(lme4)
library(lmerTest)
library(lsmeans)
library(MuMIn)
library(pwr)
```

```{r}
rm(list = ls())
```


## Reading data

```{r reading-data}
MR_data <- read_csv("../preproc-data/MR_pav_data.csv")
ST_data <- read_csv("../preproc-data/ST_pav_data.csv")
MS_data <- read_csv("../preproc-data/MS_pav_data.csv")
NASATLX_data <- read_csv("../preproc-data/NASATLX_pav_data.csv")
SEQUENCE_data <- read_csv("../preproc-data/SEQ_pav_data.csv")
```



## Behavioral data

### Remove outliers & Aggregate

```{r is-outlier-fun}
is_outlier <- function(x) ifelse(x > quantile(x, .25, na.rm = TRUE) - 1.5 * IQR(x, na.rm = TRUE) &
                                   x < quantile(x, .75, na.rm = TRUE) + 1.5 * IQR(x, na.rm = TRUE),
                                 FALSE, TRUE)
```

#### Mental Rotation

```{r}
MR_data |> 
  group_by(id, level, task) |> 
  mutate(is_outlier = is_outlier(rt)) |> 
  filter(!is_outlier) |> 
  summarise(rt = mean(rt),
            acc = mean(is_correct)) -> MR_data_agg
```

```{r, eval=FALSE}
MR_data_agg |> write_csv("../preproc-data/MR_pav_data_agg.csv")
```

```{r, echo=FALSE, message=FALSE}
MR_data_agg <- read_csv("../preproc-data/MR_pav_data_agg.csv")
```

#### Memory Span

```{r ms-agg}
MS_data |> 
  group_by(id, level, task) |> 
  mutate(is_outlier = is_outlier(rt)) |> 
  mutate(is_outlier = ifelse(is.na(is_outlier), FALSE, is_outlier)) |> 
  filter(!is_outlier) |> 
  summarise(rt = mean(rt),
            acc = mean(acc)) -> MS_data_agg
```

```{r, eval=FALSE}
MS_data_agg |> write_csv("../preproc-data/MS_pav_data_agg.csv")
```

```{r, echo=FALSE, message=FALSE}
MS_data_agg <- read_csv("../preproc-data/MS_pav_data_agg.csv")
```

#### Sternberg Task

```{r st-agg}
ST_data |> 
  group_by(id, level, task) |> 
  mutate(is_outlier = is_outlier(rt)) |> 
  filter(!is_outlier) |> 
  summarise(rt = mean(rt),
            acc = mean(is_correct)) -> ST_data_agg
```

```{r, eval=FALSE}
ST_data_agg |> write_csv("../preproc-data/ST_pav_data_agg.csv")
```

```{r, echo=FALSE, message=FALSE}
ST_data_agg <- read_csv("../preproc-data/ST_pav_data_agg.csv")
```


### Plot all paradigms

```{r rt_plot, warning=FALSE}
MR_data_agg |> 
  bind_rows(MS_data_agg, ST_data_agg) |>
  mutate(level = factor(level, 
                        ordered = TRUE, 
                        levels = c("easy", "medium", "hard"))) |> 
  ggplot(aes(level, rt)) +
  facet_wrap(~ task, scales = "free_y", 
             labeller = labeller(task = c(MR = "Mental Rotation",
                                          MS = "Memory Span", 
                                          ST = "Sternberg Task"))) +
  stat_summary(fun.data = mean_cl_boot, geom = "pointrange") +
  labs(x = "Difficulty Level", y = "Reaction time, s")
```

```{r acc_plot}
MR_data_agg |> 
  bind_rows(MS_data_agg, ST_data_agg) |>
  mutate(level = factor(level, 
                        ordered = TRUE, 
                        levels = c("easy", "medium", "hard"))) |> 
  ggplot(aes(level, acc)) +
  facet_wrap(~ task, scales = "free_y", 
             labeller = labeller(task = c(MR = "Mental Rotation",
                                          MS = "Memory Span", 
                                          ST = "Sternberg Task"))) +
  stat_summary(fun.data = mean_cl_boot, geom = "pointrange") +
  labs(x = "Difficulty Level", y = "Accuracy")
```

### Desriptives

#### Mental Rotation 

```{r mr_rt_desc}
MR_data_agg |> 
  group_by(level, task) |> 
  summarise(n = unique(id) |> length(),
            mean = mean(rt),
            median = median(rt),
            sd = sd(rt),
            min = min(rt),
            max = max(rt),
            CI_lower = mean - 1.96 * sd / sqrt(n),
            CI_upper = mean + 1.96 * sd / sqrt(n)) |> 
  # mutate_all(.funs = function(x) if (is.double(x)) return(round(x, 2)) else return(x)) |> 
  knitr::kable(caption = "Mental Rotation. Reaction Time", digits = 2)
```

```{r mr_acc_desc}
MR_data_agg |> 
  group_by(level, task) |> 
  summarise(n = unique(id) |> length(),
            mean = mean(acc),
            sd = sd(acc),
            min = min(acc),
            max = max(acc),
            CI_lower = mean - 1.96 * sd / sqrt(n),
            CI_upper = mean + 1.96 * sd / sqrt(n)) |> 
  # mutate_all(.funs = function(x) if (is.double(x)) return(round(x, 3)) else return(x)) |> 
  knitr::kable(caption = "Mental Rotation. Accuracy", digits = 3)
```


#### Memory Span

```{r ms_rt_desc}
MS_data_agg |> 
  group_by(level, task) |> 
  summarise(n = unique(id) |> length(),
            mean = mean(rt, na.rm = TRUE),
            median = median(rt, na.rm = TRUE),
            sd = sd(rt, na.rm = TRUE),
            min = min(rt, na.rm = TRUE),
            max = max(rt, na.rm = TRUE),
            CI_lower = mean - 1.96 * sd / sqrt(n),
            CI_upper = mean + 1.96 * sd / sqrt(n)) |> 
  # mutate_all(.funs = function(x) if (is.double(x)) return(round(x, 2)) else return(x)) |> 
  knitr::kable(caption = "Memory Span. Reaction Time", digits = 2)
```

```{r ms_acc_desc}
MS_data_agg |> 
  group_by(level, task) |> 
  summarise(n = unique(id) |> length(),
            mean = mean(acc),
            sd = sd(acc),
            min = min(acc),
            max = max(acc),
            CI_lower = mean - 1.96 * sd / sqrt(n),
            CI_upper = mean + 1.96 * sd / sqrt(n)) |> 
  knitr::kable(caption = "Memory Span. Accuracy", digits = 3)
```


#### Sternberg Task

```{r st_rt_desc}
ST_data_agg |> 
  group_by(level, task) |> 
  summarise(n = unique(id) |> length(),
            mean = mean(rt),
            sd = sd(rt),
            min = min(rt),
            max = max(rt),
            CI_lower = mean - 1.96 * sd / sqrt(n),
            CI_upper = mean + 1.96 * sd / sqrt(n)) |> 
  knitr::kable(caption = "Sternberg Task. Reaction Time", digits = 2)
```

```{r st_acc_desc}
ST_data_agg |> 
  group_by(level, task) |> 
  summarise(n = unique(id) |> length(),
            mean = mean(acc),
            sd = sd(acc),
            min = min(acc),
            max = max(acc),
            CI_lower = mean - 1.96 * sd / sqrt(n),
            CI_upper = mean + 1.96 * sd / sqrt(n)) |> 
  knitr::kable(caption = "Sternberg Task. Accuracy", digits = 3)
```


### ANOVA

```{r bind-data}
MR_data_agg |> 
  bind_rows(MS_data_agg, ST_data_agg) -> all_pav_data_agg
```

#### Reaction Time

```{r rt-mix}
mix_rt <- lmer(rt ~ task * level + (1|id), all_pav_data_agg)
summary(mix_rt)
anova(mix_rt)
```

```{r pairwise-rt}
lsmeans(mix_rt, pairwise ~ task:level, adjust = "tukey")
```

```{r rt_plot_, warning=FALSE}
MR_data_agg |> 
  bind_rows(MS_data_agg, ST_data_agg) |>
  mutate(level = factor(level, 
                        ordered = TRUE, 
                        levels = c("easy", "medium", "hard"))) |> 
  ggplot(aes(level, rt)) +
  facet_wrap(~ task, scales = "free_y", 
             labeller = labeller(task = c(MR = "Mental Rotation",
                                          MS = "Memory Span", 
                                          ST = "Sternberg Task"))) +
  stat_summary(fun.data = mean_cl_boot, geom = "pointrange") +
  labs(x = "Difficulty Level", y = "Reaction time, s")
```

#### Accuracy

```{r acc-anova}
mix_acc <- lmer(acc ~ task * level + (1|id), all_pav_data_agg)
summary(mix_acc)
anova(mix_acc)
```

```{r pairwise-acc}
lsmeans(mix_acc, pairwise ~ task:level, adjust = "tukey")
```

```{r acc_plot_, warning=FALSE}
MR_data_agg |> 
  bind_rows(MS_data_agg, ST_data_agg) |>
  mutate(level = factor(level, 
                        ordered = TRUE, 
                        levels = c("easy", "medium", "hard"))) |> 
  ggplot(aes(level, acc)) +
  facet_wrap(~ task, scales = "free_y", 
             labeller = labeller(task = c(MR = "Mental Rotation",
                                          MS = "Memory Span", 
                                          ST = "Sternberg Task"))) +
  stat_summary(fun.data = mean_cl_boot, geom = "pointrange") +
  labs(x = "Difficulty Level", y = "Accuracy")
```


## Questionnaire Data

```{r nasa-fix-factor}
NASATLX_data |> 
  # fix factor
  mutate(
    level = factor(
      level,
      levels = c("easy", "medium", "hard"),
      ordered = TRUE
    )
  ) -> NASATLX_data
```

```{r set-colors}
level_colors <- c("#4bd752", "#d7984b", "#d7524b")
task_colors <- c("red4", "green4", "blue4")
back_histogram_color <- "gray60"
```

```{r}
NASATLX_data |>
  ggplot(aes(scale, score, fill = level)) +
  geom_boxplot() +
  facet_grid(task ~ .,
             labeller = labeller(task = c(
               MR = "Mental Rotation",
               MS = "Memory Span",
               ST = "Sternberg Task"
             ))) +
  theme(legend.position = "bottom") +
  labs(x = "NASA-TLX Scale",
       y = "NASA-TLX Score (raw)",
       fill = "Difficulty Level") +
  scale_fill_manual(values = level_colors)
```

```{r}
pd <- position_dodge(0.3)
NASATLX_data |>
  ggplot(aes(scale, score, color = level)) +
  stat_summary(fun.data = mean_cl_boot, geom = "errorbar",
               position = pd, width = .3) +
  stat_summary(fun = mean, geom = "point",
               position = pd) +
   facet_grid(task ~ .,
             labeller = labeller(task = c(
               MR = "Mental Rotation",
               MS = "Memory Span",
               ST = "Sternberg Task"
             ))) +
  theme(legend.position = "bottom") +
  labs(x = "NASA-TLX Scale",
       y = "NASA-TLX Score (raw)",
       fill = "Difficulty Level") +
  scale_color_manual(values = level_colors)
```

```{r, include=FALSE}
pd <- position_dodge(0.3)
NASATLX_data |>
  ggplot(aes(scale, score, color = level)) +
  stat_summary(fun.data = mean_cl_boot, geom = "errorbar",
               position = pd, width = .3) +
  stat_summary(fun = mean, geom = "point",
               position = pd) +
  facet_grid(task ~ .) +
  theme(legend.position = "bottom") +
  labs(x = "Шкалы NASA-TLX",
       y = "NASA-TLX (сырой балл)",
       color = "Уровень сложности") +
  scale_color_manual(values = level_colors, 
                     labels = c(easy = "легкий", 
                                medium = "средний", 
                                hard = "сложный"))
ggsave("anova_errorbars_color.png", dpi = 300)
```

```{r, include=FALSE}
pd <- position_dodge(0.3)
NASATLX_data |>
  ggplot(aes(scale, score, color = level)) +
  stat_summary(fun.data = mean_cl_boot, geom = "errorbar",
               position = pd, width = .3) +
  stat_summary(fun = mean, geom = "point",
               position = pd) +
  facet_grid(task ~ .) +
  theme(legend.position = "bottom") +
  labs(x = "Шкалы NASA-TLX",
       y = "NASA-TLX (сырой балл)",
       color = "Уровень сложности") +
  scale_color_manual(values = c(easy = "black",
                                medium = "gray40",
                                hard = "gray60"))
ggsave("anova_errorbars.png", dpi = 300)
```

### GLMM scales

```{r nasatlx-wide}
NASATLX_data |> 
  pivot_wider(values_from = score, names_from = scale) |> 
  mutate(OW = ME + PH + TI + PE + EF + FR) -> nasa_tlx_wide
```

```{r}
nasa_tlx_wide |> write_csv("../preproc-data/nasatlx_raw_score_pav_data.csv")
```

```{r r2-to-f2}
r2tof2 <- function(r2) r2 / (1 - r2)
```

#### ME

```{r mix-me}
mix_ME <- lmer(ME ~ task * level + (1|id), 
               nasa_tlx_wide,
               contrasts = list(level="contr.treatment"))
summary(mix_ME)
anova(mix_ME)
r.squaredGLMM(mix_ME)[1]
r2tof2(r.squaredGLMM(mix_ME)[1])
pwr.f2.test(f2 = r2tof2(r.squaredGLMM(mix_ME)[1]),
            u = 4,
            sig.level = .05,
            power = .8)
```

```{r pairwise-me}
lsmeans(mix_ME, pairwise ~ task:level, adjust = "tukey")
```

```{r}
pd <- position_dodge(0.3)
nasa_tlx_wide |>
  pivot_longer(cols = c("ME", "PH", "PE", "TI", "EF", "FR", "OW"),
               names_to = "scale", values_to = "score") |> 
  filter(scale == "ME") |> 
  ggplot(aes(scale, score, color = level)) +
  stat_summary(fun.data = mean_cl_boot, geom = "errorbar",
               position = pd, width = .3) +
  stat_summary(fun = mean, geom = "point",
               position = pd) +
   facet_grid(. ~ task,
             labeller = labeller(task = c(
               MR = "Mental Rotation",
               MS = "Memory Span",
               ST = "Sternberg Task"
             ))) +
  theme(legend.position = "bottom") +
  scale_color_manual(values = level_colors) +
  labs(x = "NASA-TLX Scale",
       y = "NASA-TLX Score (raw)",
       fill = "Difficulty Level",
       title = "Weighted Score Distributions. Mental Demand")
```


#### PH
```{r mix-ph}
mix_PH <- lmer(PH ~ task * level + (1|id), 
               nasa_tlx_wide,
               contrasts = list(level="contr.treatment"))
summary(mix_PH)
anova(mix_PH)
r.squaredGLMM(mix_PH)[1]
r2tof2(r.squaredGLMM(mix_PH)[1])
pwr.f2.test(f2 = r2tof2(r.squaredGLMM(mix_PH)[1]),
            u = 4,
            sig.level = .05,
            power = .8)
```

```{r pairwise-ph}
lsmeans(mix_PH, pairwise ~ task:level, adjust = "tukey")
```

```{r}
pd <- position_dodge(0.3)
nasa_tlx_wide |>
  pivot_longer(cols = c("ME", "PH", "PE", "TI", "EF", "FR", "OW"),
               names_to = "scale", values_to = "score") |> 
  filter(scale == "PH") |> 
  ggplot(aes(scale, score, color = level)) +
  stat_summary(fun.data = mean_cl_boot, geom = "errorbar",
               position = pd, width = .3) +
  stat_summary(fun = mean, geom = "point",
               position = pd) +
   facet_grid(. ~ task,
             labeller = labeller(task = c(
               MR = "Mental Rotation",
               MS = "Memory Span",
               ST = "Sternberg Task"
             ))) +
  theme(legend.position = "bottom") +
  scale_color_manual(values = level_colors) +
  labs(x = "NASA-TLX Scale",
       y = "NASA-TLX Score (raw)",
       fill = "Difficulty Level",
       title = "Weighted Score Distributions. Physical Demand")
```

#### TI
```{r mix-ti}
mix_TI <- lmer(TI ~ task * level + (1|id), 
               nasa_tlx_wide,
               contrasts = list(level="contr.treatment"))
summary(mix_TI)
anova(mix_TI)
r.squaredGLMM(mix_TI)[1]
r2tof2(r.squaredGLMM(mix_TI)[1])
pwr.f2.test(f2 = r2tof2(r.squaredGLMM(mix_TI)[1]),
            u = 4,
            sig.level = .05,
            power = .8)
```

```{r pairwise-ti}
lsmeans(mix_TI, pairwise ~ task:level, adjust = "tukey")
```

```{r}
pd <- position_dodge(0.3)
nasa_tlx_wide |>
  pivot_longer(cols = c("ME", "PH", "PE", "TI", "EF", "FR", "OW"),
               names_to = "scale", values_to = "score") |> 
  filter(scale == "TI") |> 
  ggplot(aes(scale, score, color = level)) +
  stat_summary(fun.data = mean_cl_boot, geom = "errorbar",
               position = pd, width = .3) +
  stat_summary(fun = mean, geom = "point",
               position = pd) +
   facet_grid(. ~ task,
             labeller = labeller(task = c(
               MR = "Mental Rotation",
               MS = "Memory Span",
               ST = "Sternberg Task"
             ))) +
  theme(legend.position = "bottom") +
  scale_color_manual(values = level_colors) +
  labs(x = "NASA-TLX Scale",
       y = "NASA-TLX Score (raw)",
       fill = "Difficulty Level",
       title = "Weighted Score Distributions. Time Pressure")
```


#### PE
```{r mix-pe}
mix_PE <- lmer(PE ~ task * level + (1|id), 
               nasa_tlx_wide,
               contrasts = list(level="contr.treatment"))
summary(mix_PE)
anova(mix_PE)
r.squaredGLMM(mix_PE)[1]
r2tof2(r.squaredGLMM(mix_PE)[1])
pwr.f2.test(f2 = r2tof2(r.squaredGLMM(mix_PE)[1]),
            u = 4,
            sig.level = .05,
            power = .8)
```

```{r pairwise-pe}
lsmeans(mix_PE, pairwise ~ task:level, adjust = "tukey")
```

```{r}
pd <- position_dodge(0.3)
nasa_tlx_wide |>
  pivot_longer(cols = c("ME", "PH", "PE", "TI", "EF", "FR", "OW"),
               names_to = "scale", values_to = "score") |> 
  filter(scale == "PE") |> 
  ggplot(aes(scale, score, color = level)) +
  stat_summary(fun.data = mean_cl_boot, geom = "errorbar",
               position = pd, width = .3) +
  stat_summary(fun = mean, geom = "point",
               position = pd) +
   facet_grid(. ~ task,
             labeller = labeller(task = c(
               MR = "Mental Rotation",
               MS = "Memory Span",
               ST = "Sternberg Task"
             ))) +
  theme(legend.position = "bottom") +
  scale_color_manual(values = level_colors) +
  labs(x = "NASA-TLX Scale",
       y = "NASA-TLX Score (raw)",
       fill = "Difficulty Level",
       title = "Weighted Score Distributions. Performance")
```

#### EF
```{r mix-ef}
mix_EF <- lmer(EF ~ task * level + (1|id), 
               nasa_tlx_wide,
               contrasts = list(level="contr.treatment"))
summary(mix_EF)
anova(mix_EF)
r.squaredGLMM(mix_EF)[1]
r2tof2(r.squaredGLMM(mix_EF)[1])
pwr.f2.test(f2 = r2tof2(r.squaredGLMM(mix_EF)[1]),
            u = 4,
            sig.level = .05,
            power = .8)
```


```{r pairwise-ef}
lsmeans(mix_EF, pairwise ~ task:level, adjust = "tukey")
```

```{r}
pd <- position_dodge(0.3)
nasa_tlx_wide |>
  pivot_longer(cols = c("ME", "PH", "PE", "TI", "EF", "FR", "OW"),
               names_to = "scale", values_to = "score") |> 
  filter(scale == "EF") |> 
  ggplot(aes(scale, score, color = level)) +
  stat_summary(fun.data = mean_cl_boot, geom = "errorbar",
               position = pd, width = .3) +
  stat_summary(fun = mean, geom = "point",
               position = pd) +
   facet_grid(. ~ task,
             labeller = labeller(task = c(
               MR = "Mental Rotation",
               MS = "Memory Span",
               ST = "Sternberg Task"
             ))) +
  theme(legend.position = "bottom") +
  scale_color_manual(values = level_colors) +
  labs(x = "NASA-TLX Scale",
       y = "NASA-TLX Score (raw)",
       fill = "Difficulty Level",
       title = "Weighted Score Distributions. Effort")
```

#### FR
```{r mix-fr}
mix_FR <- lmer(FR ~ task * level + (1|id), 
               nasa_tlx_wide,
               contrasts = list(level="contr.treatment"))
summary(mix_FR)
anova(mix_FR)
r.squaredGLMM(mix_FR)[1]
r2tof2(r.squaredGLMM(mix_FR)[1])
pwr.f2.test(f2 = r2tof2(r.squaredGLMM(mix_FR)[1]),
            u = 4,
            sig.level = .05,
            power = .8)
```

```{r pairwise-fr}
lsmeans(mix_FR, pairwise ~ task:level, adjust = "tukey")
```

```{r}
pd <- position_dodge(0.3)
nasa_tlx_wide |>
  pivot_longer(cols = c("ME", "PH", "PE", "TI", "EF", "FR", "OW"),
               names_to = "scale", values_to = "score") |> 
  filter(scale == "FR") |> 
  ggplot(aes(scale, score, color = level)) +
  stat_summary(fun.data = mean_cl_boot, geom = "errorbar",
               position = pd, width = .3) +
  stat_summary(fun = mean, geom = "point",
               position = pd) +
   facet_grid(. ~ task,
             labeller = labeller(task = c(
               MR = "Mental Rotation",
               MS = "Memory Span",
               ST = "Sternberg Task"
             ))) +
  theme(legend.position = "bottom") +
  scale_color_manual(values = level_colors) +
  labs(x = "NASA-TLX Scale",
       y = "NASA-TLX Score (raw)",
       fill = "Difficulty Level",
       title = "Weighted Score Distributions. Frustration")
```

#### Overall Workload

```{r mix-ow}
mix_OW <- lmer(OW ~ task * level + (1|id), 
               nasa_tlx_wide,
               contrasts = list(level="contr.treatment"))
summary(mix_OW)
anova(mix_OW)
r.squaredGLMM(mix_OW)[1]
r2tof2(r.squaredGLMM(mix_OW)[1])
pwr.f2.test(f2 = r2tof2(r.squaredGLMM(mix_OW)[1]),
            u = 7,
            sig.level = .05,
            power = .8)
```

```{r pairwise-ow}
lsmeans(mix_OW, pairwise ~ task:level, adjust = "tukey")
```

```{r}
pd <- position_dodge(0.3)
nasa_tlx_wide |>
  pivot_longer(cols = c("ME", "PH", "PE", "TI", "EF", "FR", "OW"),
               names_to = "scale", values_to = "score") |> 
  filter(scale == "OW") |> 
  ggplot(aes(scale, score, color = level)) +
  stat_summary(fun.data = mean_cl_boot, geom = "errorbar",
               position = pd, width = .3) +
  stat_summary(fun = mean, geom = "point",
               position = pd) +
   facet_grid(. ~ task,
             labeller = labeller(task = c(
               MR = "Mental Rotation",
               MS = "Memory Span",
               ST = "Sternberg Task"
             ))) +
  theme(legend.position = "bottom") +
  scale_color_manual(values = level_colors) +
  labs(x = "NASA-TLX Scale",
       y = "NASA-TLX Score (raw)",
       fill = "Difficulty Level",
       title = "Weighted Score Distributions. Overall Workload")
```
