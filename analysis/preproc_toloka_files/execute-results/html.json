{
  "hash": "56c92a83f2530078d029bb07d8a65e91",
  "result": {
    "markdown": "# Preprocess. Toloka Banch\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::opts_chunk$set(eval = FALSE)\n```\n:::\n\n\n## Packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\ntheme_set(theme_bw())\n```\n:::\n\n\n## Functions\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmr_preproc <- function(d) {\n  \n  require(tidyverse)\n  \n  d |> select(\n    # select columns we need\n    correctAns,\n    base_pic,\n    rotated_pic,\n    resp_MR_easy.keys,\n    resp_MR_easy.corr,\n    resp_MR_easy.rt\n  ) |>\n    drop_na() |> # remove technical NAs (recording artefacts, not missing data)\n    mutate(task = \"MR\",\n           # add task name (mental rotation)\n           level = \"easy\",\n           # add difficulty level\n           trial = 1:16) |> # number trials\n    rename(\n      # rename columns for handy usage\n      \"key\" = resp_MR_easy.keys,\n      \"is_correct\" = resp_MR_easy.corr,\n      \"rt\" = resp_MR_easy.rt\n    ) -> MR_easy # ready to use\n  \n  \n  d |> select(\n    # select columns we need\n    correctAns,\n    base_pic,\n    rotated_pic,\n    resp_MR_medium.keys,\n    resp_MR_medium.corr,\n    resp_MR_medium.rt\n  ) |>\n    drop_na() |> # remove technical NAs (recording artefacts, not missing data)\n    mutate(task = \"MR\",\n           # add task name (mental rotation)\n           level = \"medium\",\n           # add difficulty level\n           trial = 1:16) |>  # number trials\n    rename(\n      # rename columns for handy usage\n      \"key\" = resp_MR_medium.keys,\n      \"is_correct\" = resp_MR_medium.corr,\n      \"rt\" = resp_MR_medium.rt\n    ) -> MR_medium # ready to use\n  \n  \n  \n  d |> select(\n    # select columns we need\n    correctAns,\n    base_pic,\n    rotated_pic,\n    resp_MR_hard.keys,\n    resp_MR_hard.corr,\n    resp_MR_hard.rt\n  ) |>\n    drop_na() |> # remove technical NAs (recording artefacts, not missing data)\n    mutate(task = \"MR\",\n           # add task name (mental rotation)\n           level = \"hard\",\n           # add difficulty level\n           trial = 1:16) |> # number trials\n    rename(\n      # rename columns for handy usage\n      \"key\" = resp_MR_hard.keys,\n      \"is_correct\" = resp_MR_hard.corr,\n      \"rt\" = resp_MR_hard.rt\n    ) -> MR_hard # ready to use\n  \n  # bind all conditions of mental rotation task to one tibble\n  \n  bind_rows(MR_easy, MR_medium, MR_hard) -> MR\n  \n  return(MR)\n  \n}\n\nst_preproc <- function(d) {\n  \n  require(tidyverse)\n  \n  d |> select(\n    # select columns we need\n    target_present,\n    key_resp_SE.keys,\n    key_resp_SE.corr,\n    key_resp_SE.rt\n  ) |>\n    drop_na() |> # remove technical NAs (recording artefacts, not missing data)\n    mutate(task = \"ST\",\n           # add task name (Sternberg task)\n           level = \"easy\",\n           # add difficulty level\n           trial = 1:16) |> # number trials\n    rename(\n      # rename columns for handy usage\n      \"key\" = key_resp_SE.keys,\n      \"is_correct\" = key_resp_SE.corr,\n      \"rt\" = key_resp_SE.rt\n    ) -> ST_easy # ready to use\n  \n  d |> select(\n    # select columns we need\n    target_present,\n    key_resp_SM.keys,\n    key_resp_SM.corr,\n    key_resp_SM.rt\n  ) |>\n    drop_na() |> # remove technical NAs (recording artefacts, not missing data)\n    mutate(task = \"ST\",\n           # add task name (Sternberg task)\n           level = \"medium\",\n           # add difficulty level\n           trial = 1:16) |> # number trials\n    rename(\n      # rename columns for handy usage\n      \"key\" = key_resp_SM.keys,\n      \"is_correct\" = key_resp_SM.corr,\n      \"rt\" = key_resp_SM.rt\n    ) -> ST_medium # ready to use\n  \n  \n  d |> select(\n    # select columns we need\n    target_present,\n    resp_S_H_trials.keys,\n    resp_S_H_trials.corr,\n    resp_S_H_trials.rt\n  ) |>\n    drop_na() |> # remove technical NAs (recording artefacts, not missing data)\n    mutate(task = \"ST\",\n           # add task name (Sternberg task)\n           level = \"hard\",\n           # add difficulty level\n           trial = 1:16) |> # number trials\n    rename(\n      # rename columns for handy usage\n      \"key\" = resp_S_H_trials.keys,\n      \"is_correct\" = resp_S_H_trials.corr,\n      \"rt\" = resp_S_H_trials.rt\n    ) -> ST_hard # ready to use\n  \n  # bind all conditions of sternberg task to one tibble\n  bind_rows(ST_easy, ST_hard, ST_medium) -> ST\n  \n  return(ST)\n  \n}\n\nms_preproc <- function(d) {\n  \n  # Since we our participants could fill the fields in any order, \n  # here is a function which allows us to count correct inputs \n  # our subjects made.\n  \n  n_count <- function(df) {\n    df |> select(matches(\"^noun\")) |> as.matrix() -> s\n    df |> select(matches(\"^resp\")) |> as.matrix() -> r\n    a <- vector(mode = \"numeric\", length = 16L)\n    for (i in 1:16) {\n      a[i] <- sum(r[i, ] %in% s[i, ])\n    }\n    return(a)\n  }\n  \n  if (\"mouse_MSe.time\" %in% colnames(d)) {\n    \n    d |> select(\n      matches(\"^noun\"),\n      matches(\"resp\\\\d\\\\.text$\"),\n      \"mouse_MSe.time\"\n    ) |>\n      filter_at(vars(paste0(\"noun\", 1:3)), all_vars(!is.na(.))) |>\n      filter_at(vars(paste0(\"noun\", 4:7)), all_vars(is.na(.))) |>\n      mutate(task = \"MS\",\n             level = \"easy\") |>\n      rename(\n        \"resp1\" = resp1.text,\n        \"resp2\" = resp2.text,\n        \"resp3\" = resp3.text,\n        \"rt\" = \"mouse_MSe.time\"\n      ) |>\n      select(-c(paste0(\"noun\", 4:7))) -> MS_easy\n    \n    d |> select(\n      matches(\"^noun\"),\n      matches(\"MSm.text$\"),\n      \"mouse_MSm.time\"\n    ) |>\n      filter_at(vars(paste0(\"noun\", 4:5)), all_vars(!is.na(.))) |>\n      filter_at(vars(paste0(\"noun\", 6:7)), all_vars(is.na(.))) |>\n      mutate(task = \"MS\",\n             level = \"medium\") |> \n      rename(\"rt\" = \"mouse_MSm.time\") |>\n      rename_with(.fn = str_replace_all, \n                  pattern = \"_MSm\\\\.text\", \n                  replacement = \"\") |> \n      select(-noun6, -noun7) -> MS_medium\n    \n    \n    d |> select(\n      matches(\"^noun\"),\n      matches(\"MSh.text$\"),\n      \"mouse_MSh.time\"\n    ) |>\n      filter_at(vars(paste0(\"noun\", 1:7)), all_vars(!is.na(.))) |>\n      mutate(task = \"MS\",\n             level = \"hard\") |>\n      rename(\"rt\" = \"mouse_MSh.time\") |> \n      rename_with(.fn = str_replace_all,\n                  pattern = \"_MSh\\\\.text\",\n                  replacement = \"\") -> MS_hard\n    \n  } else {\n    \n    d |> select(matches(\"^noun\"),\n                matches(\"resp\\\\d\\\\.text$\")) |>\n      filter_at(vars(paste0(\"noun\", 1:3)), all_vars(!is.na(.))) |>\n      filter_at(vars(paste0(\"noun\", 4:7)), all_vars(is.na(.))) |>\n      mutate(task = \"MS\",\n             level = \"easy\",\n             rt = NA) |>\n      rename(\n        \"resp1\" = resp1.text,\n        \"resp2\" = resp2.text,\n        \"resp3\" = resp3.text\n      ) |>\n      select(-c(paste0(\"noun\", 4:7))) -> MS_easy\n    \n    d |> select(matches(\"^noun\"),\n                matches(\"MSm.text$\")) |>\n      filter_at(vars(paste0(\"noun\", 4:5)), all_vars(!is.na(.))) |>\n      filter_at(vars(paste0(\"noun\", 6:7)), all_vars(is.na(.))) |>\n      mutate(task = \"MS\",\n             level = \"medium\",\n             rt = NA) |>\n      rename_with(.fn = str_replace_all,\n                  pattern = \"_MSm\\\\.text\",\n                  replacement = \"\") |> \n      select(-noun6, -noun7) -> MS_medium\n    \n    \n    d |> select(matches(\"^noun\"),\n                matches(\"MSh.text$\")) |>\n      filter_at(vars(paste0(\"noun\", 1:7)), all_vars(!is.na(.))) |>\n      mutate(task = \"MS\",\n             level = \"hard\",\n             rt = NA) |>\n      rename_with(.fn = str_replace_all,\n                  pattern = \"_MSh\\\\.text\", \n                  replacement = \"\") -> MS_hard\n  }\n  \n  tibble(\n    #id = MS_easy$id[1],\n    trials = 1:16,\n    MS_easy_n = n_count(MS_easy),\n    MS_easy_rt = MS_easy$rt,\n    MS_medium_n = n_count(MS_medium),\n    MS_medium_rt = MS_medium$rt,\n    MS_hard_n = n_count(MS_hard),\n    MS_hard_rt = MS_hard$rt\n  ) |>\n    pivot_longer(cols = -c(\"trials\"), values_to = \"value\") |>\n    separate(name, c(\"task\", \"level\", \"name\")) |>\n    pivot_wider(values_from = value, names_from = name) |>\n    mutate(acc = ifelse(level == \"easy\", n / 3,\n                        ifelse(\n                          level == \"medium\", n / 5,\n                          ifelse(level == \"hard\", n / 7, NA)\n                        ))) -> MS\n  \n  return(MS)\n  \n}\n\nnasatlx_preproc <- function(d) {\n  d |> select(slider.response,\n              head,\n              task_type,\n              task_level) |>\n    filter_at(vars(head, task_type, task_level), all_vars(!is.na(.))) |>\n    rename(\"score\" = slider.response) |>\n    mutate(\n      scale = recode(\n        head,\n        \"Умственная нагрузка\" = \"ME\",\n        \"Физическая нагрузка\" = \"PH\",\n        \"Давление времени\" = \"TI\",\n        \"Успешность выполнения\" = \"PE\",\n        \"Усилия\" = \"EF\",\n        \"Уровень фрустрации\" = \"FR\"\n      ),\n      task = recode(\n        task_type,\n        \"mental_rotation\" = \"MR\",\n        \"sternberg\" = \"ST\",\n        \"mental_span\" = \"MS\"\n      ),\n      level = recode(\n        task_level,\n        \"1\" = \"easy\",\n        \"2\" = \"medium\",\n        \"3\" = \"hard\"\n      )\n    ) |>\n    select(scale, score, task, level) -> NASATLX\n  \n  return(NASATLX)\n}\n\nsequence_preproc <- function(d) {\n\n  d |> select(\n    E_rotation,\n    M_rotation,\n    H_rotation,\n    E_Sternberg,\n    M_Sternberg,\n    H_Sternberg,\n    E_span,\n    M_span,\n    H_span\n  ) |>\n    drop_na() |>\n    sapply(function(x) which(x == 1)) -> v\n\n  tibble(name = names(v),\n         order = v) |>\n    arrange(order) |>\n    separate(name, c(\"level\", \"task\"), \"_\") |>\n    mutate(\n      task = recode(\n        task,\n        \"rotation\" = \"MR\",\n        \"Sternberg\" = \"ST\",\n        \"span\" = \"MS\"\n      ),\n      level = recode(\n        level,\n        \"E\" = \"easy\",\n        \"M\" = \"medium\",\n        \"H\" = \"hard\"\n      )\n    ) -> SEQUENCE\n\n  return(SEQUENCE)\n\n}\n\nweights_preproc <- function(d) {\n  \n  d %>% \n    select(matches(\"^pair\"), task_type) %>% \n    drop_na() %>% \n    pivot_longer(cols = matches(\"^pair\")) %>% \n    mutate(value = value %>% str_remove_all(\"\\\\\\\\n|\\\\[|\\\\]\")) %>% \n    separate(value, into = c(\"option1\", \"option2\"), sep = \",\") -> pairs\n  \n  d %>% \n    select(matches(\"^S_pc\"), task_type) %>% \n    drop_na() %>% \n    pivot_longer(cols = matches(\"^S_pc\")) %>% \n    mutate(name = name %>% str_remove(\"\\\\.response\") %>% \n             str_replace(\"S_pc_\", \"pair\")) %>% \n    full_join(pairs, by = join_by(task_type, name)) %>% \n    mutate(choice = ifelse(value == 1, option1, option2)) %>% \n    mutate(choice = recode(choice,\n                           '\"Умственнаянагрузка\"' = \"ME\",\n                           '\"Физическаянагрузка\"' = \"PH\",\n                           '\"Усилия\"' = \"EF\",\n                           '\"Давленивремени\"' = \"TI\",\n                           '\"Успешностьвыполнения\"' = \"PE\",\n                           '\"Уровеньфрустрации\"' = \"FR\")) %>% \n    group_by(task_type, choice) %>% \n    summarise(n = n()) %>% \n    mutate(w = n / 15) -> WEIGHTS\n  \n  return(WEIGHTS)\n  \n}\n```\n:::\n\n\n\n## All Toloka files\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfiles <- c(\n  paste0(\"../data-toloka/pool1/\", dir(\"../data-toloka/pool1\")),\n  paste0(\"../data-toloka/pool2/\", dir(\"../data-toloka/pool2\")),\n  paste0(\"../data-toloka/pool34/\", dir(\"../data-toloka/pool34\")),\n  paste0(\"../data-toloka/pool5/\", dir(\"../data-toloka/pool5\"))\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nMR_data <- tibble()\nST_data <- tibble()\nMS_data <- tibble()\nNASATLX_data <- tibble()\nSEQUENCE_data <- tibble()\nWEIGHTS_data <- tibble()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (i in 1:length(files)) {\n  \n  print(files[i])\n  \n  d <- read_csv(files[i], show_col_types = FALSE)\n  \n  MR_data |> bind_rows(mr_preproc(d) |> mutate(file = files[i])) -> MR_data\n  ST_data |> bind_rows(st_preproc(d) |> mutate(file = files[i])) -> ST_data\n  MS_data |> bind_rows(ms_preproc(d) |> mutate(file = files[i])) -> MS_data\n  NASATLX_data |> bind_rows(nasatlx_preproc(d) |> mutate(file = files[i])) -> NASATLX_data\n  SEQUENCE_data |> bind_rows(sequence_preproc(d) |> mutate(file = files[i])) -> SEQUENCE_data\n  WEIGHTS_data |> bind_rows(weights_preproc(d) |> mutate(file = files[i])) -> WEIGHTS_data\n  \n}\n```\n:::\n\n\n\n### Create IDs for Toloka files\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(116)\ntibble(file = MR_data$file |> unique(),\n       id = stringi::stri_rand_strings(MR_data$file |> unique() |> length(),\n                                       length = 10)) |> \n  mutate(pool = str_extract_all(file, \"pool\\\\d+\") |> unlist()) -> tolokaIDS\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(MR_data$file) |> length()\nunique(ST_data$file) |> length()\nunique(MS_data$file) |> length()\nunique(NASATLX_data$file) |> length()\nunique(SEQUENCE_data$file) |> length()\n```\n:::\n\n\n## Plotting\n\n\n::: {.cell}\n\n```{.r .cell-code}\nMR_data %>% \n  full_join(tolokaIDS, by = \"file\") |> \n  filter(pool == \"pool5\")|> \n  ggplot(aes(level, rt)) +\n  geom_boxplot(data = MR_data |> select(-file), color = \"darkred\") +\n  geom_boxplot() +\n  facet_wrap(~ file, scales = \"free_y\") +\n  ylim(0, 100)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nMS_data %>% \n  full_join(tolokaIDS, by = \"file\") |> \n  filter(pool == \"pool5\")|>\n  ggplot(aes(level, rt)) +\n  geom_boxplot(data = MS_data |> select(-file), color = \"darkred\") +\n  geom_boxplot() +\n  facet_wrap(~ file, scales = \"free_y\") +\n  ylim(0, 250)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nST_data %>% \n  full_join(tolokaIDS, by = \"file\") |> \n  filter(pool == \"pool5\")|>\n  ggplot(aes(level, rt)) +\n  geom_boxplot(data = ST_data |> select(-file), color = \"darkred\") +\n  geom_boxplot() +\n  facet_wrap(~ file, scales = \"free_y\") +\n  ylim(0, 25)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nMR_data |> \n  full_join(tolokaIDS) |> \n  select(-file) -> MR_data\nMS_data |> \n  full_join(tolokaIDS) |> \n  select(-file) -> MS_data\nST_data |> \n  full_join(tolokaIDS) |> \n  select(-file) -> ST_data\nNASATLX_data |> \n  full_join(tolokaIDS) |> \n  select(-file) %>% \n  pivot_wider(names_from = scale, values_from = score) %>% \n  mutate(PE = 20 - PE) %>% # reverse PE scale\n  pivot_longer(cols = -c(\"task\", \"level\", \"id\"),\n               names_to = \"scale\", values_to = \"score\") %>% \n  mutate(score = (score * 5) %>% round()) -> NASATLX_data\nSEQUENCE_data |> \n  full_join(tolokaIDS) |> \n  select(-file) -> SEQUENCE_data\nWEIGHTS_data |> \n  full_join(tolokaIDS) |> \n  select(-file) -> WEIGHTS_data\n```\n:::\n\n\n\n## Clear & Aggregate\n\n\n::: {.cell}\n\n```{.r .cell-code}\nMR_data %>% \n  group_by(id, level, task) %>% \n  summarise(median = median(rt),\n            q1 = quantile(rt, 0.25),\n            q3 = quantile(rt, 0.75),\n            iqr = q3 - q1) %>% \n  full_join(MR_data, by = c(\"id\", \"level\", \"task\")) %>% \n  mutate(not_outlier = ifelse(rt > q1 - 1.5 * iqr & rt < q3 + 1.5 * iqr, TRUE, FALSE)) %>% \n  filter(not_outlier) %>% \n  group_by(task, level, id) |> \n  summarise(rt = mean(rt),\n            acc = mean(is_correct)) -> MR_data_toloka_agg\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nST_data |> \n  group_by(id, level, task) %>% \n  summarise(median = median(rt),\n            q1 = quantile(rt, 0.25),\n            q3 = quantile(rt, 0.75),\n            iqr = q3 - q1) %>% \n  full_join(ST_data, by = c(\"id\", \"level\", \"task\")) %>% \n  mutate(not_outlier = ifelse(rt > q1 - 1.5 * iqr & rt < q3 + 1.5 * iqr, TRUE, FALSE)) %>% \n  filter(not_outlier) %>% \n  group_by(task, level, id) |> \n  summarise(rt = mean(rt),\n            acc = mean(is_correct)) -> ST_data_toloka_agg\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nMS_data |> \n  group_by(id, level, task) %>% \n  summarise(median = median(rt),\n            q1 = quantile(rt, 0.25),\n            q3 = quantile(rt, 0.75),\n            iqr = q3 - q1) %>% \n  full_join(MS_data, by = c(\"id\", \"level\", \"task\")) %>% \n  mutate(not_outlier = ifelse(rt > q1 - 1.5 * iqr & rt < q3 + 1.5 * iqr, \n                              TRUE, FALSE)) %>% \n  filter(not_outlier) %>% \n  group_by(task, level, id) |> \n  summarise(rt = mean(rt),\n            acc = mean(acc)) -> MS_data_toloka_agg\n```\n:::\n\n\n\n\n\n\n## Export preprocessed data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nMR_data_toloka_agg |> write_csv(\"../preproc-data/mental_rotation_data_toloka.csv\")\nST_data_toloka_agg |> write_csv(\"../preproc-data/sternberg_data_toloka.csv\")\nMS_data_toloka_agg |> write_csv(\"../preproc-data/mental_span_data_toloka.csv\")\nNASATLX_data |> write_csv(\"../preproc-data/nasa_tlx_data_toloka.csv\")\nSEQUENCE_data |> write_csv(\"../preproc-data/sequence_data_toloka.csv\")\nWEIGHTS_data |> write_csv(\"../preproc-data/weights_data_toloka.csv\")\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}